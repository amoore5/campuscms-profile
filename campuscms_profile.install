<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function campuscms_profile_install() {
  $themes['theme_default'] = variable_get('campuscms_theme_default', 'bartik');
  $themes['admin_theme'] = variable_get('campuscms_admin_theme', 'seven');

  _campuscms_profile_setup_themes($themes);

  _campuscms_profile_setup_time_date();

  $filter_perms = _campuscms_profile_setup_filter_formats();

  _campuscms_profile_setup_menus();

  _campuscms_profile_setup_blocks($themes);

  _campuscms_profile_setup_roles($filter_perms);

  _campuscms_profile_setup_quickbar();

  _campuscms_profile_setup_custom_breadcrumbs();

  _campuscms_profile_setup_captcha();

  _campuscms_profile_setup_home_page();
}

function _campuscms_profile_setup_themes($themes) {
  theme_enable($themes);

  foreach ($themes as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  // Disable bartik if it's not used
  if ($themes['theme_default'] !== 'bartik') {
    theme_disable(array('bartik'));
  }

  // Make the admin theme the default for creating content.
  variable_set('node_admin_theme', '1');
}

function _campuscms_profile_setup_time_date() {
  // Set default country to US
  variable_set('site_default_country', 'US');
  // First day of the week will be sunday
  variable_set('date_first_day', '0');
  // Timezone
  variable_set('date_default_timezone', 'America/Los_Angeles');
  // Users set their own timezone
  variable_set('configurable_timezones', 1);
  // Don't show a message to users if the timezone is empty
  variable_set('empty_timezone_message', 0);
  // Users default timezone
  variable_set('user_default_timezone', '0');

  // Insert custom format: November 25, 2011 - 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'F j, Y - g:ia', 'type' => 'custom', 'locked' => 0))
    ->execute();

  // Insert custom format: November 25, 2011
  db_insert('date_formats')
    ->fields(array('format' => 'F j, Y', 'type' => 'custom', 'locked' => 0))
    ->execute();

  // Insert custom format: Nov. 25, 2011 - 2:45pm
  db_insert('date_formats')
    ->fields(array('format' => 'M. j, Y - g:ia', 'type' => 'custom', 'locked' => 0))
    ->execute();

  // Insert custom format: Nov. 25, 2011
  db_insert('date_formats')
    ->fields(array('format' => 'M. j, Y', 'type' => 'custom', 'locked' => 0))
    ->execute();

  // Insert custom format: 11/25/2011
  db_insert('date_formats')
    ->fields(array('format' => 'm/d/Y', 'type' => 'custom', 'locked' => 0))
    ->execute();


  // Insert custom format: November 25, 2011 - 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'long_time', 'title' => 'Long With Time', 'locked' => 0))
    ->execute();

  // Insert custom format: Nov. 25, 2011 - 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'medium_time', 'title' => 'Medium With Time', 'locked' => 0))
    ->execute();

  // Insert custom format: 11/25/2011 - 2:45pm
  db_insert('date_format_type')
    ->fields(array('type' => 'short_time', 'title' => 'Short With Time', 'locked' => 0))
    ->execute();


  // Date Long Format
  variable_set('date_format_long_time', 'F j, Y - g:ia');
  variable_set('date_format_long', 'F j, Y');

  // Date Medium Format
  variable_set('date_format_medium_time', 'M. j, Y - g:ia');
  variable_set('date_format_medium', 'M. j, Y');

  // Date Short Format
  variable_set('date_format_short_time', 'm/d/Y - g:ia');
  variable_set('date_format_short', 'm/d/Y');
}

function _campuscms_profile_setup_filter_formats() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<h2> <h3> <h4> <a> <em> <strong> <cite> <blockquote> <ul> <ol> <li> <dl> <dt> <dd> <img> <table> <tbody> <th> <tr> <td> <div>',
        ),
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable default permissions for system roles.
  $filter_perms = array(
    'filtered_html' => filter_permission_name($filtered_html_format),
    'full_html' => filter_permission_name($full_html_format),
  );

  return $filter_perms;
}

function _campuscms_profile_setup_menus() {
  // Build left footer menu
  $left_footer_definition = array(
    'menu_name' => 'menu-left-footer',
    'title' => 'Left Footer',
    'description' => 'This is the left footer menu.',
  );

  menu_save($left_footer_definition);

  // Build center footer menu
  $center_footer_definition = array(
    'menu_name' => 'menu-center-footer',
    'title' => 'Center Footer',
    'description' => 'This is the center footer menu.',
  );

  menu_save($center_footer_definition);

  // Build right footer menu
  $right_footer_definition = array(
    'menu_name' => 'menu-right-footer',
    'title' => 'Right Footer',
    'description' => 'This is the right footer menu.',
  );

  menu_save($right_footer_definition);
}

function _campuscms_profile_setup_blocks($themes) {
  // Enable some standard blocks.
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $themes['theme_default'],
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $themes['admin_theme'],
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $themes['theme_default'],
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $themes['admin_theme'],
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $themes['admin_theme'],
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $themes['admin_theme'],
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $themes['admin_theme'],
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'menu_block',
      'delta' => 'campuscms_secondary_menus-1',
      'theme' => $themes['theme_default'],
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'campuscms_feature_search',
      'delta' => 'google_custom_search_box',
      'theme' => $themes['theme_default'],
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

function _campuscms_profile_setup_roles($filter_perms) {
  // Set permissions for anonymous and authenticated roles.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filter_perms['filtered_html']));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filter_perms['filtered_html']));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 4;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a content editor role
  $content_editor = new stdClass();
  $content_editor->name = 'content editor';
  $content_editor->weight = 2;
  user_role_save($content_editor);

  $content_editor_permissions = array(
    $filter_perms['filtered_html'],
    'administer nodes',
    'access content overview',
    'view revisions',
    'view own unpublished content',
    'create url aliases',
    'view the administration theme',
    'administer main-menu menu items',
    'administer menu-center-footer menu items',
    'administer menu-right-footer menu items',
  );
  user_role_grant_permissions($content_editor->rid, $content_editor_permissions);

  // Create a site manager role
  $site_manager = new stdClass();
  $site_manager->name = 'site manager';
  $site_manager->weight = 3;
  user_role_save($site_manager);

  $site_manager_permissions = array(
    $filter_perms['filtered_html'],
    'administer blocks',
    'access contextual links',
    'view own unpublished content',
    'administer nodes',
    'access content overview',
    'view revisions',
    'revert revisions',
    'delete revisions',
    'create url aliases',
    'assign content editor role',
    'assign site manager role',
    'administer site configuration',
    'administer themes',
    'access administration pages',
    'view the administration theme',
    'access site reports',
    'administer users',
    'administer main-menu menu items',
    'administer menu-center-footer menu items',
    'administer menu-right-footer menu items',
  );
  user_role_grant_permissions($site_manager->rid, $site_manager_permissions);
}

function _campuscms_profile_setup_quickbar() {
  // Enable faux machine names for roles.
  variable_set('quickbar_use_machine_names', 1);

  $quickbar_settings = array(
    'iconset' => 'quickbar',
    'sticky' => 0,
    'float' => 0,
    'secondary_menu_visibility' => 0,
    'nofollow' => 0,
  );

  $quickbar_extras_settings = array(
    'show_username' => 1,
    'show_username_prefix' => 'Hello, ',
    'show_username_suffix' => '',
    'show_username_link' => 1,
  );

  $home_link = array(
    'link_path' => drupal_get_normal_path('<front>'),
    'link_title' => 'Home',
  );

  $add_content_link = array(
    'link_path' => drupal_get_normal_path('node/add'),
    'link_title' => 'Add Content',
  );

  $manage_content_link = array(
    'link_path' => drupal_get_normal_path('admin/content'),
    'link_title' => 'Manage Content',
  );

  $menus_link = array(
    'link_path' => drupal_get_normal_path('admin/structure/menu'),
    'link_title' => 'Menus',
  );

  $users_link = array(
    'link_path' => drupal_get_normal_path('admin/people'),
    'link_title' => 'Users',
  );

  $site_configuration_link = array(
    'link_path' => drupal_get_normal_path('admin/config'),
    'link_title' => 'Site Configuration',
  );

  $logout_link = array(
    'link_path' => drupal_get_normal_path('caslogout'),
    'link_title' => 'Logout',
  );

  /**
   * Build administrator toolbar menu
   */
  $administrator_menu_definition = array(
    'menu_name' => 'menu-toolbar-administrator',
    'title' => 'Toolbar - Administrator',
    'description' => 'This is the administration toolbar for adminstrators.',
  );

  menu_save($administrator_menu_definition);

  // Add Home Menu Item
  $administrator_home_link = $home_link;
  $administrator_home_link['menu_name'] = 'menu-toolbar-administrator';
  menu_link_save($administrator_home_link);

  // Add Logout Menu Item
  $administrator_logout_link = $logout_link;
  $administrator_logout_link['menu_name'] = 'menu-toolbar-administrator';
  $administrator_logout_mlid = menu_link_save($administrator_logout_link);

  // Add administrator menu settings for quickbar.
  $menus['administrator'] = 'menu-toolbar-administrator';
  $weights['administrator'] = -10;

  variable_set('quickbar_settings_administrator', $quickbar_settings);

  $administrator_quickbar_extras_settings = $quickbar_extras_settings;
  $administrator_quickbar_extras_settings['menu']['mlid_' . $administrator_logout_mlid] = 'right';
  variable_set('quickbar_extras_settings_administrator', $administrator_quickbar_extras_settings);

  /**
   * Build site manager toolbar menu
   */
  $site_manager_menu_definition = array(
    'menu_name' => 'menu-toolbar-site-manager',
    'title' => 'Toolbar - Site Manager',
    'description' => 'This is the administration toolbar for site managers.',
  );

  menu_save($site_manager_menu_definition);

  // Add site manager settings for quickbar
  $menus['site-manager'] = 'menu-toolbar-site-manager';
  $weights['site-manager'] = -9;

  /**
   * Build content editor toolbar menu
   */
  $content_editor_menu_definition = array(
    'menu_name' => 'menu-toolbar-content-editor',
    'title' => 'Toolbar - Content Editor',
    'description' => 'This is the administration toolbar for content editors.',
  );

  menu_save($content_editor_menu_definition);

  // Add content editor settings for quickbar
  $menus['content-editor'] = 'menu-toolbar-content-editor';
  $weights['content-editor'] = -8;

  menu_cache_clear_all();

  // Add the authenticated user settings for quickbar
  $menus['authenticated-user'] = 0;
  $weights['authenticated-user'] = 0;

  // Add the anonymous user settings for quickbar
  $menus['anonymous-user'] = 0;
  $weights['anonymous-user'] = 1;

  variable_set('quickbar_role_menus', $menus);
  variable_set('quickbar_role_weights', $weights);

}

function _campuscms_profile_setup_custom_breadcrumbs() {
  /**
   * Basic Settings
   */
  variable_set('custom_breadcrumbs_home', 'Home');
  // Page Title
  variable_set('custom_breadcrumbs_append_page_title', 0);
  variable_set('custom_breadcrumbs_append_page_title_no_link', 0);

  // Menu Structure
  variable_set('custom_breadcrumbs_set_menu_breadcrumb', 1);
  variable_set('custom_breadcrumbs_menu_list', array('main-menu' => 'main-menu'));
  /**
   * Advanced Settings
   */
  variable_set('custom_breadcrumbs_set_global_home_breadcrumb', 0);
  variable_set('custom_breadcrumbs_use_php_in_titles', 0);
  variable_set('custom_breadcrumbs_force_active_trail', 0);
  // Excluded Paths
  variable_set('custom_breadcrumbs_use_exclude_list', 0);
  variable_set('custom_breadcrumbs_exclude_list', '');
  // HTML Element Identifiers
  variable_set('custom_breadcrumbs_home_id', 0);
  variable_set('custom_breadcrumbs_parts_class', 0);
  variable_set('custom_breadcrumbs_even_odd_class', 0);
  variable_set('custom_breadcrumbs_type_class', 0);
  variable_set('custom_breadcrumbs_append_bid_class', 0);
}

function _campuscms_profile_setup_captcha() {
  variable_set('captcha_default_challenge', 'hidden_captcha/Hidden CAPTCHA');

  db_update('captcha_points')
    ->fields(array('captcha_type' => 'default'))
    ->condition('form_id', 'user_register_form', '=')
    ->execute();
}

function _campuscms_profile_setup_home_page() {
  // Need to revert so I can use the field_page_body field.
  features_revert(array('campuscms_feature_page' => array('field')));

  // Create the home page node.
  $node = new stdClass();
  $node->type = "page";
  $node->title = "Home";
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  node_object_prepare($node);

  $node->field_page_body[LANGUAGE_NONE][0] = array(
    'value' => 'This is your homepage. If you are logged in you can click the edit link at the top to edit what is said here.',
    'format' => 'filtered_html',
  );

  $node = node_submit($node);
  node_save($node);

  // Save the front page.
  variable_set('site_frontpage', 'node/' . $node->nid);
}
